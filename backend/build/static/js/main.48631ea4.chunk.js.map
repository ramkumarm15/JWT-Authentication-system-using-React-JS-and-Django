{"version":3,"sources":["store/actions/types.js","axiosInstance.js","store/actions/auth.js","components/Navbar/Navbar.js","utils/Routes.js","hocs/Layout.js","pages/Activation/Activation.js","pages/Homepage/Homepage.js","pages/Loginpage/Loginpage.js","pages/Resetpassword/Resetpassword.js","pages/Resetpasswordconfrim/ResetPasswordConfrim.js","pages/Signup/Signup.js","App.js","store/reducers/auth.js","store/reducers/index.js","store/store.js","index.js"],"names":["SIGNUP_SUCCESS","SIGNUP_FAILED","LOGIN_SUCCESS","LOGIN_FAILED","LOAD_USER_SUCCESS","LOAD_USER_FAILED","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAILED","LOGOUT","PASSWORD_RESET_SUCCESS","PASSWORD_RESET_FAILED","PASSWORD_RESET_CONFIRM_SUCCESS","PASSWORD_RESET_CONFIRM_FAILED","API","axios","create","baseURL","process","loadUser","dispatch","a","localStorage","getItem","get","headers","Authorization","Accept","result","type","payload","data","Header","connect","state","isAuthenticated","auth","logout","useState","logout_user","AuthLinks","Nav","Link","onClick","GuestLinks","as","to","Navbar","bg","expand","Container","Brand","Toggle","aria-controls","Collapse","id","className","Routes","path","Layout","checkAuthentication","config","body","JSON","stringify","token","post","code","children","useEffect","transition","Slide","Activation","Homepage","Row","Col","xl","Login","login","email","password","status","statusText","res","response","formData","setformData","handleChange","e","target","name","value","handleSubmit","preventDefault","log","toast","success","hideProgressBar","autoClose","message","detail","error","lg","Card","Body","Form","onSubmit","Group","Label","htmlFor","Control","placeholder","onChange","required","minLength","Button","variant","Resetpassword","reset_password","dark","ResetPasswordConfrim","reset_password_confirm","uid","new_password","re_new_password","console","match","requestSent","setRequestSent","params","Signup","signup","re_password","emailError","setEmailError","passwordError","setPasswordError","response_data","isInvalid","Feedback","disabled","Spinner","animation","size","role","aria-hidden","App","LayoutRoute","Component","component","rest","render","props","exact","initialState","access","refresh","user","combineReducers","action","setItem","removeItem","middleware","thunk","store","createStore","rootReducers","composeWithDevTools","applyMiddleware","Root","document","getElementById","AppSource","ReactDOM"],"mappings":"0PAAaA,EAAiB,iBACjBC,EAAgB,gBAEhBC,EAAgB,gBAChBC,EAAe,eAEfC,EAAoB,oBACpBC,EAAmB,mBAEnBC,EAAwB,wBACxBC,EAAuB,uBAEvBC,EAAS,SAETC,EAAyB,yBACzBC,EAAwB,wBAExBC,EAAiC,iCACjCC,EAAgC,gC,QChBhCC,E,OAAMC,EAAMC,OAAO,CAC9BC,QAASC,0BC6IEC,EAAW,yDAAM,WAAOC,GAAP,eAAAC,EAAA,0DACxBC,aAAaC,QAAQ,UADG,0CAGHT,EAAIU,IAAI,kBAAmB,CAC9CC,QAAS,CACP,eAAgB,mBAChBC,cAAc,OAAD,OAASJ,aAAaC,QAAQ,WAC3CI,OAAQ,sBAPY,OAGlBC,EAHkB,OAWxBR,EAAS,CACPS,KAAMxB,EACNyB,QAASF,EAAOG,OAbM,gDAgBxBX,EAAS,CACPS,KAAMvB,IAjBgB,gCAqB1Bc,EAAS,CACPS,KAAMvB,IAtBkB,yDAAN,uD,OC/EX0B,EAASC,aAJE,SAACC,GAAD,MAAY,CAClCC,gBAAiBD,EAAME,KAAKD,mBAGiB,CAAEE,OD2G3B,kBAAM,SAACjB,GAC3BA,EAAS,CACPS,KAAMpB,OC7GYwB,EAxDG,SAAC,GAAiC,IAA/BI,EAA8B,EAA9BA,OAAQF,EAAsB,EAAtBA,gBAAsB,EACxBG,oBAAS,GADe,mBAGlDC,GAHkD,UAGpC,WAClBF,MAGIG,EAAY,WAChB,OACE,mCACE,cAACC,EAAA,EAAIC,KAAL,CAAUC,QAASJ,EAAnB,uBAIAK,EAAa,WACjB,OACE,qCACE,cAACH,EAAA,EAAIC,KAAL,CAAUG,GAAIH,IAAMI,GAAG,SAAvB,mBAGA,cAACL,EAAA,EAAIC,KAAL,CAAUG,GAAIH,IAAMI,GAAG,UAAvB,wBAON,OACE,mCACE,cAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAA1B,SACE,eAACC,EAAA,EAAD,WACE,cAACH,EAAA,EAAOI,MAAR,CAAcN,GAAIH,IAAMI,GAAG,IAA3B,0BAGA,cAACC,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,cAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,mBAApB,SACE,eAACd,EAAA,EAAD,CAAKe,UAAU,UAAf,UACE,cAACf,EAAA,EAAIC,KAAL,CAAUG,GAAIH,IAAMI,GAAG,IAAvB,kBAGA,cAACL,EAAA,EAAIC,KAAL,CAAUG,GAAIH,IAAMI,GAAG,IAAvB,iBAGCX,EAAkB,cAACK,EAAD,IAAgB,cAACI,EAAD,mBCpDpCa,EAEA,CAAEC,KAAM,KAFRD,EAGA,CAAEC,KAAM,UAHRD,EAIH,CAAEC,KAAM,WAJLD,EAKI,CAAEC,KAAM,mBALZD,EAMW,CAAEC,KAAM,+BANnBD,EAOC,CAAEC,KAAM,yB,QCiBTC,EAAS1B,YAAQ,KAAM,CAAE2B,oBHLH,yDAAM,WAAOxC,GAAP,iBAAAC,EAAA,0DACnCC,aAAaC,QAAQ,UADc,wBAE/BsC,EAAS,CACbpC,QAAS,CACP,eAAgB,mBAChBE,OAAQ,qBAINmC,EAAOC,KAAKC,UAAU,CAAEC,MAAO3C,aAAaC,QAAQ,YATrB,kBAYdT,EAAIoD,KAAK,oBAAqBJ,EAAMD,GAZtB,UAcV,oBAdU,OAcxB9B,KAAKoC,KAdmB,wBAejC/C,EAAS,CACPS,KAAMtB,IAhByB,mBAkB1B,GAlB0B,eAoBjCa,EAAS,CACPS,KAAMrB,IArByB,mBAuB1B,GAvB0B,iEA0BnCY,EAAS,CACPS,KAAMrB,IA3B2B,mBA6B5B,GA7B4B,uCAgCrCY,EAAS,CACPS,KAAMrB,IAjC6B,mBAmC9B,GAnC8B,0DAAN,uDGKwBW,YAArCc,EAfJ,SAAC,GAAiD,IAA/C2B,EAA8C,EAA9CA,oBAAqBzC,EAAyB,EAAzBA,SAAUiD,EAAe,EAAfA,SAMlD,OALAC,qBAAU,WACRT,IACAzC,MACC,IAGD,qCACE,cAACa,EAAD,IACA,cAAC,IAAD,CAAgBsC,WAAYC,MAC3BH,QCjBMI,EAAa,WACtB,OACI,8C,gBCyCKC,EAAWxC,aAHA,SAACC,GAAD,MAAY,CAClCC,gBAAiBD,EAAME,KAAKD,mBAENF,EAtCJ,SAAC,GAAyB,IAAvBE,EAAsB,EAAtBA,gBAErB,OACE,mCACGA,EACC,cAACe,EAAA,EAAD,UACE,cAACwB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAT,SACE,sBAAKpB,UAAU,oBAAf,UACE,sBAAKA,UAAU,cAAf,UACE,4DACA,mBAAGA,UAAU,aAAb,6IAMF,oBAAIA,UAAU,SACd,cAAC,IAAD,CAAMA,UAAU,yBAAyBV,GAAG,SAA5C,mBAGA,cAAC,IAAD,CAAMU,UAAU,4BAA4BV,GAAG,UAA/C,8BAQR,cAAC,IAAD,CAAUA,GAAG,gB,gCC4FR+B,EAAQ5C,aALG,SAACC,GAAD,MAAY,CAElCC,gBAAiBD,EAAME,KAAKD,mBAGgB,CAAE2C,MN3B3B,SAACC,EAAOC,GAAR,8CAAqB,WAAO5D,GAAP,6CAAAC,EAAA,6DAClCwC,EAAS,CACbpC,QAAS,CACP,eAAgB,qBAGdqC,EAAOC,KAAKC,UAAU,CAAEe,QAAOC,aANG,kBASjBlE,EAAIoD,KAAK,oBAAqBJ,EAAMD,GATnB,UAShCjC,EATgC,OAYnB,MAFAA,EAAOqD,OAVY,wBAa5BA,EAAuBrD,EAAvBqD,OAAQC,EAAetD,EAAfsD,WACVC,EAAM,CAAEF,SAAQC,cACtB9D,EAAS,CACPS,KAAM1B,EACN2B,QAASF,EAAOG,OAGlBX,EAASD,KApB2B,kBAqB7BgE,GArB6B,iBAuBCvD,EAAOwD,SAApCH,EAvB4B,EAuB5BA,OAAQC,EAvBoB,EAuBpBA,WAAYnD,EAvBQ,EAuBRA,KACtBoD,EAAM,CAAEF,SAAQC,aAAYnD,QAElCX,EAAS,CACPS,KAAMzB,IA3B4B,kBA6B7B+E,GA7B6B,mEAgCD,KAAIC,SAAjCH,EAhC8B,EAgC9BA,OAAQC,EAhCsB,EAgCtBA,WAAYnD,EAhCU,EAgCVA,KAEtBoD,EAAM,CAAEF,SAAQC,aAAYnD,QAClCX,EAAS,CACPS,KAAMzB,IApC8B,kBAsC/B+E,GAtC+B,0DAArB,wDM2BAlD,EApHJ,SAAC,GAAgC,IAA9B6C,EAA6B,EAA7BA,MAAO3C,EAAsB,EAAtBA,gBAAsB,EACfG,mBAAS,CACvCyC,MAAO,GACPC,SAAU,KAHmC,mBACxCK,EADwC,KAC9BC,EAD8B,KAMvCP,EAAoBM,EAApBN,MAAOC,EAAaK,EAAbL,SAETO,EAAe,SAACC,GAAD,OACnBF,EAAY,2BAAKD,GAAN,kBAAiBG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAEjDC,EAAY,uCAAG,WAAOJ,GAAP,iBAAAnE,EAAA,6DACnBmE,EAAEK,iBADiB,SAIDf,EAAMC,EAAOC,GAJZ,OAMA,OAFbc,EAJa,QAMXb,QAAgB,gBAItBc,IAAMC,QAJgB,gBAIC,CACrBC,iBAAiB,EACjBC,UAAW,QAIPC,EAFD,UAEcL,EAAIb,OAFlB,YAE4Ba,EAAIZ,WAFhC,aAE+CY,EAAI/D,KAAKqE,QAE7DL,IAAMM,MAAMF,EAAS,CACnBF,iBAAiB,EACjBC,UAAW,OApBI,2CAAH,sDA4BlB,OAAI/D,EACK,cAAC,IAAD,CAAUW,GAAG,MAIpB,mCACE,qBAAKU,UAAU,4CAAf,SACE,cAACN,EAAA,EAAD,UACE,cAACwB,EAAA,EAAD,CAAKlB,UAAU,yBAAf,SACE,cAACmB,EAAA,EAAD,CAAK2B,GAAI,EAAT,SACE,cAACC,EAAA,EAAD,UACE,eAACA,EAAA,EAAKC,KAAN,CAAWhD,UAAU,MAArB,UACE,sBAAKA,UAAU,0BAAf,UACE,oBAAIA,UAAU,iBAAd,mBACA,mBAAGA,UAAU,kBAAb,6DAIF,eAACiD,EAAA,EAAD,CAAMC,SAAU,SAAClB,GAAD,OAAOI,EAAaJ,IAApC,UACE,eAACiB,EAAA,EAAKE,MAAN,CAAYnD,UAAU,OAAtB,UACE,cAACiD,EAAA,EAAKG,MAAN,CAAYC,QAAQ,SAApB,2BACA,cAACJ,EAAA,EAAKK,QAAN,CACEjF,KAAK,QACL6D,KAAK,QACLnC,GAAG,QACHwD,YAAY,gBACZpB,MAAOZ,GAAS,GAChBiC,SAAU,SAACxB,GAAD,OAAOD,EAAaC,IAC9ByB,UAAQ,OAGZ,eAACR,EAAA,EAAKE,MAAN,CAAYnD,UAAU,OAAtB,UACE,cAAC,IAAD,CACEV,GAAG,kBACHU,UAAU,wBAFZ,SAIE,4DAEF,cAACiD,EAAA,EAAKG,MAAN,CAAYC,QAAQ,YAApB,sBACA,cAACJ,EAAA,EAAKK,QAAN,CACEjF,KAAK,WACL6D,KAAK,WACLnC,GAAG,WACHwD,YAAY,iBACZpB,MAAOX,GAAY,GACnBgC,SAAU,SAACxB,GAAD,OAAOD,EAAaC,IAC9B0B,UAAU,IACVD,UAAQ,OAGZ,cAACR,EAAA,EAAKE,MAAN,CAAYnD,UAAU,wBAAtB,SACE,cAAC2D,EAAA,EAAD,CAAQtF,KAAK,SAASuF,QAAQ,UAAUzB,MAAM,QAA9C,wBAKJ,qBAAKnC,UAAU,mBAAf,SACE,oBAAGA,UAAU,aAAb,4BACkB,IAChB,cAAC,IAAD,CAAMV,GAAG,UAAT,sDCrCTuE,EAAgBpF,YAAQ,KAAM,CAAEqF,eP0Gf,SAACvC,GAAD,8CAAW,WAAO3D,GAAP,iBAAAC,EAAA,6DACjCwC,EAAS,CACbpC,QAAS,CACP,eAAgB,qBAGdqC,EAAOC,KAAKC,UAAU,CAAEe,UANS,kBAShBjE,EAAIoD,KAAK,8BAA+BJ,EAAMD,GAT9B,qBAWrCzC,EAAS,CACPS,KAAMnB,IAZ6B,mBAc9B,GAd8B,yCAgBrCU,EAAS,CACPS,KAAMlB,IAjB6B,mBAmB9B,GAnB8B,0DAAX,wDO1GDsB,EA7DJ,SAAC,GAAwB,IAAtBqF,EAAqB,EAArBA,eAAqB,EACfhF,mBAAS,CACvCyC,MAAO,KAFsC,mBACxCM,EADwC,KAC9BC,EAD8B,KAKvCP,EAAUM,EAAVN,MAKFa,EAAY,uCAAG,WAAOJ,GAAP,SAAAnE,EAAA,6DACnBmE,EAAEK,iBADiB,SAGDyB,EAAevC,GAHd,eAKjBgB,IAAMwB,KAAK,wCAAyC,CAClDrB,UAAW,MANI,2CAAH,sDAWlB,OACE,mCACE,qBAAK1C,UAAU,4CAAf,SACE,cAACN,EAAA,EAAD,UACE,cAACwB,EAAA,EAAD,CAAKlB,UAAU,yBAAf,SACE,cAACmB,EAAA,EAAD,CAAK2B,GAAI,EAAT,SACE,cAACC,EAAA,EAAD,UACE,eAACA,EAAA,EAAKC,KAAN,CAAWhD,UAAU,MAArB,UACE,qBAAKA,UAAU,0BAAf,SACE,oBAAIA,UAAU,iBAAd,mCAEF,eAACiD,EAAA,EAAD,CAAMC,SAAU,SAAClB,GAAD,OAAOI,EAAaJ,IAApC,UACE,eAACiB,EAAA,EAAKE,MAAN,CAAYnD,UAAU,OAAtB,UACE,cAACiD,EAAA,EAAKG,MAAN,CAAYC,QAAQ,SAApB,2BACA,cAACJ,EAAA,EAAKK,QAAN,CACEjF,KAAK,QACL6D,KAAK,QACLnC,GAAG,QACHwD,YAAY,gBACZpB,MAAOZ,GAAS,GAChBiC,SAAU,SAACxB,GAAD,OAlCX,SAACA,GAAD,OACnBF,EAAY,2BAAKD,GAAN,kBAAiBG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,SAiChBJ,CAAaC,IAC9ByB,UAAQ,OAGZ,cAACR,EAAA,EAAKE,MAAN,CAAYnD,UAAU,wBAAtB,SACE,cAAC2D,EAAA,EAAD,CAAQtF,KAAK,SAASuF,QAAQ,UAA9B,8CCyDTI,GAAuBvF,YAAQ,KAAM,CAAEwF,uBRyFlD,SAACC,EAAKzD,EAAO0D,EAAcC,GAA3B,8CAA+C,WAAOxG,GAAP,iBAAAC,EAAA,6DACvCwC,EAAS,CACbpC,QAAS,CACP,eAAgB,qBAGdqC,EAAOC,KAAKC,UAAU,CAAE0D,MAAKzD,QAAO0D,eAAcC,oBANX,kBAQtB9G,EAAIoD,KACvB,sCACAJ,EACAD,GAXyC,qBAc3CzC,EAAS,CACPS,KAAMjB,IAfmC,mBAiBpC,GAjBoC,yCAmB3CQ,EAAS,CACPS,KAAMhB,IAERgH,QAAQ/B,IAAI,KAAIV,UAtB2B,mBAuBpC,GAvBoC,0DAA/C,wDQzFkCnD,EAvGJ,SAAC,GAAuC,IAArC6F,EAAoC,EAApCA,MAAOL,EAA6B,EAA7BA,uBAA6B,EACrCnF,mBAAS,CACvCqF,aAAc,GACdC,gBAAiB,KAHkD,mBAC9DvC,EAD8D,KACpDC,EADoD,OAK/BhD,oBAAS,GALsB,mBAK9DyF,EAL8D,KAKjDC,EALiD,KAM7DL,EAAkCtC,EAAlCsC,aAAcC,EAAoBvC,EAApBuC,gBAEhBrC,EAAe,SAACC,GAAD,OACnBF,EAAY,2BAAKD,GAAN,kBAAiBG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAEjDC,EAAY,uCAAG,WAAOJ,GAAP,iBAAAnE,EAAA,yDACnBmE,EAAEK,iBAEI6B,EAAMI,EAAMG,OAAOP,IACnBzD,EAAQ6D,EAAMG,OAAOhE,MAEvB0D,IAAiBC,EANF,iCAOCH,EAChBC,EACAzD,EACA0D,EACAC,GAXe,eAef7B,IAAMwB,KAAK,uCAAwC,CACjDrB,UAAW,MAEb8B,GAAe,IAEfjC,IAAMwB,KAAK,8CAA+C,CACxDrB,UAAW,MArBE,wBAyBjBH,IAAMM,MAAM,uBAAwB,CAAEH,UAAW,MAzBhC,4CAAH,sDA6BlB,OACE,mCACE,qBAAK1C,UAAU,4CAAf,SACE,cAACN,EAAA,EAAD,UACE,cAACwB,EAAA,EAAD,CAAKlB,UAAU,yBAAf,SACE,cAACmB,EAAA,EAAD,CAAK2B,GAAI,EAAT,SACE,cAACC,EAAA,EAAD,UACE,eAACA,EAAA,EAAKC,KAAN,CAAWhD,UAAU,MAArB,UACE,qBAAKA,UAAU,0BAAf,SACE,oBAAIA,UAAU,iBAAd,mCAEF,eAACiD,EAAA,EAAD,CAAMC,SAAU,SAAClB,GAAD,OAAOI,EAAaJ,IAApC,UACE,eAACiB,EAAA,EAAKE,MAAN,CAAYnD,UAAU,OAAtB,UACE,cAACiD,EAAA,EAAKG,MAAN,CAAYC,QAAQ,YAApB,0BACA,cAACJ,EAAA,EAAKK,QAAN,CACEjF,KAAK,WACL6D,KAAK,eACLnC,GAAG,eACHwD,YAAY,qBACZpB,MAAOgC,GAAgB,GACvBX,SAAU,SAACxB,GAAD,OAAOD,EAAaC,IAC9ByB,UAAQ,OAGZ,eAACR,EAAA,EAAKE,MAAN,CAAYnD,UAAU,OAAtB,UACE,cAACiD,EAAA,EAAKG,MAAN,CAAYC,QAAQ,eAApB,mCAGA,cAACJ,EAAA,EAAKK,QAAN,CACEjF,KAAK,WACL6D,KAAK,kBACLnC,GAAG,kBACHwD,YAAY,wBACZpB,MAAOiC,GAAmB,GAC1BZ,SAAU,SAACxB,GAAD,OAAOD,EAAaC,IAC9ByB,UAAQ,OAGZ,cAACR,EAAA,EAAKE,MAAN,CAAYnD,UAAU,wBAAtB,SACE,cAAC2D,EAAA,EAAD,CAAQtF,KAAK,SAASuF,QAAQ,UAA9B,iCAKHW,EACC,mCACE,qBAAKvE,UAAU,mBAAf,SACE,mBAAGA,UAAU,aAAb,SACE,cAAC,IAAD,CAAMV,GAAG,SAAT,yBAIJ,uB,SCmFToF,GAASjG,aALE,SAACC,GAAD,MAAY,CAElCC,gBAAiBD,EAAME,KAAKD,mBAGiB,CAAEgG,OT/H/C,SAACpD,EAAOW,EAAMV,EAAUoD,GAAxB,8CAAwC,WAAOhH,GAAP,6CAAAC,EAAA,6DAChCwC,EAAS,CACbpC,QAAS,CACP,eAAgB,qBAGdqC,EAAOC,KAAKC,UAAU,CAAEe,QAAOW,OAAMV,WAAUoD,gBANf,kBASftH,EAAIoD,KAAK,eAAgBJ,EAAMD,GAThB,UAS9BjC,EAT8B,OAajB,MAFAA,EAAOqD,OAXU,wBAc1BA,EAAuBrD,EAAvBqD,OAAQC,EAAetD,EAAfsD,WACVC,EAAM,CAAEF,SAAQC,cACtB9D,EAAS,CACPS,KAAM5B,IAjB0B,kBAmB3BkF,GAnB2B,iBAqBGvD,EAAOwD,SAApCH,EArB0B,EAqB1BA,OAAQC,EArBkB,EAqBlBA,WAAYnD,EArBM,EAqBNA,KACtBoD,EAAM,CAAEF,SAAQC,aAAYnD,QAElCX,EAAS,CACPS,KAAM3B,IAzB0B,kBA2B3BiF,GA3B2B,mEA8BC,KAAIC,SAAjCH,EA9B4B,EA8B5BA,OAAQC,EA9BoB,EA8BpBA,WAAYnD,EA9BQ,EA8BRA,KAEtBoD,EAAM,CAAEF,SAAQC,aAAYnD,QAClCX,EAAS,CACPS,KAAM3B,IAlC4B,kBAoC7BiF,GApC6B,0DAAxC,wDS+HoBlD,EAvKJ,SAAC,GAAiC,IAA/BkG,EAA8B,EAA9BA,OAAQhG,EAAsB,EAAtBA,gBAAsB,EACjBG,mBAAS,CACvCyC,MAAO,GACPW,KAAM,GACNV,SAAU,GACVoD,YAAa,KALkC,mBAC1C/C,EAD0C,KAChCC,EADgC,OAOXhD,oBAAS,GAPE,mBAO1CyF,EAP0C,KAO7BC,EAP6B,OASb1F,mBAAS,IATI,mBAS1C+F,EAT0C,KAS9BC,EAT8B,OAWPhG,mBAAS,IAXF,mBAW1CiG,EAX0C,KAW3BC,EAX2B,KAazCzD,EAAuCM,EAAvCN,MAAOW,EAAgCL,EAAhCK,KAAMV,EAA0BK,EAA1BL,SAAUoD,EAAgB/C,EAAhB+C,YAEzB7C,EAAe,SAACC,GAAD,OACnBF,EAAY,2BAAKD,GAAN,kBAAiBG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAEjDC,EAAY,uCAAG,WAAOJ,GAAP,mBAAAnE,EAAA,yDACnBmE,EAAEK,iBACEb,IAAaoD,EAFE,uBAGjBJ,GAAe,GAHE,SAKCG,EAAOpD,EAAOW,EAAMV,EAAUoD,GAL/B,OAOjB,GAAmB,OAFbtC,EALW,QAOTb,OAEJ,wEAEFqD,EAAc,IACdE,EAAiB,IACjBR,GAAe,GACfjC,IAAMC,QALJ,wEAKqB,CACrBC,iBAAiB,EACjBC,UAAW,WAMb,IAASnE,KAHTiG,GAAe,GACTS,EAAgB3C,EAAI/D,KAGxBuG,EAAuB,UAATvG,EAAmB0G,EAAc1G,GAAM,GAAK,MAC1DyG,EAA0B,aAATzG,EAAsB0G,EAAc1G,GAAQ,MAxBhD,uBA4BjBgE,IAAMM,MAAM,gDA5BK,4CAAH,sDAmClB,OAAIlE,EACK,cAAC,IAAD,CAAUW,GAAG,MAIpB,mCACE,qBAAKU,UAAU,4CAAf,SACE,cAACN,EAAA,EAAD,UACE,cAACwB,EAAA,EAAD,CAAKlB,UAAU,yBAAf,SACE,cAACmB,EAAA,EAAD,CAAK2B,GAAI,EAAT,SACE,cAACC,EAAA,EAAD,UACE,eAACA,EAAA,EAAKC,KAAN,CAAWhD,UAAU,MAArB,UACE,sBAAKA,UAAU,0BAAf,UACE,oBAAIA,UAAU,iBAAd,mBACA,mBAAGA,UAAU,kBAAb,6DAIF,eAACiD,EAAA,EAAD,CAAMC,SAAU,SAAClB,GAAD,OAAOI,EAAaJ,IAApC,UACE,eAACiB,EAAA,EAAKE,MAAN,CAAYnD,UAAU,OAAtB,UACE,cAACiD,EAAA,EAAKG,MAAN,CAAYC,QAAQ,SAApB,2BACA,cAACJ,EAAA,EAAKK,QAAN,CACEjF,KAAK,QACL6D,KAAK,QACLnC,GAAG,QACHwD,YAAY,gBACZpB,MAAOZ,GAAS,GAChBiC,SAAU,SAACxB,GAAD,OAAOD,EAAaC,IAC9ByB,UAAQ,EACRyB,YAAaL,IAEf,cAAC5B,EAAA,EAAKK,QAAQ6B,SAAd,CAAuB9G,KAAK,UAA5B,SACGwG,GAA0B,QAG/B,eAAC5B,EAAA,EAAKE,MAAN,CAAYnD,UAAU,OAAtB,UACE,cAACiD,EAAA,EAAKG,MAAN,CAAYC,QAAQ,QAApB,sBACA,cAACJ,EAAA,EAAKK,QAAN,CACEjF,KAAK,OACL6D,KAAK,OACLnC,GAAG,OACHwD,YAAY,WACZpB,MAAOD,GAAQ,GACfsB,SAAU,SAACxB,GAAD,OAAOD,EAAaC,IAC9ByB,UAAQ,OAGZ,eAACR,EAAA,EAAKE,MAAN,CAAYnD,UAAU,OAAtB,UACE,cAACiD,EAAA,EAAKG,MAAN,CAAYC,QAAQ,YAApB,sBACA,cAACJ,EAAA,EAAKK,QAAN,CACEjF,KAAK,WACL6D,KAAK,WACLnC,GAAG,WACHwD,YAAY,iBACZpB,MAAOX,GAAY,GACnBgC,SAAU,SAACxB,GAAD,OAAOD,EAAaC,IAC9B0B,UAAU,IACVwB,YAAaH,EACbtB,UAAQ,IAEV,cAACR,EAAA,EAAKK,QAAQ6B,SAAd,CAAuB9G,KAAK,UAA5B,SACG0G,GAAgC,QAGrC,eAAC9B,EAAA,EAAKE,MAAN,CAAYnD,UAAU,OAAtB,UACE,cAACiD,EAAA,EAAKG,MAAN,CAAYC,QAAQ,eAApB,+BAGA,cAACJ,EAAA,EAAKK,QAAN,CACEjF,KAAK,WACL6D,KAAK,cACLnC,GAAG,cACHwD,YAAY,oBACZpB,MAAOyC,GAAe,GACtBpB,SAAU,SAACxB,GAAD,OAAOD,EAAaC,IAC9B0B,UAAU,IACVD,UAAQ,OAGZ,cAACR,EAAA,EAAKE,MAAN,CAAYnD,UAAU,wBAAtB,SACIuE,EAKA,eAACZ,EAAA,EAAD,CAAQC,QAAQ,UAAUwB,UAAQ,EAAlC,UACE,cAACC,GAAA,EAAD,CACEhG,GAAG,OACHiG,UAAU,SACVC,KAAK,KACLC,KAAK,SACLC,cAAY,SAEb,KARH,qBAJA,cAAC9B,EAAA,EAAD,CAAQtF,KAAK,SAASuF,QAAQ,UAAUzB,MAAM,QAA9C,6CCrIXuD,GAAM,WACjB,IAAMC,EAAc,SAAC,GAAuC,IAA1BC,EAAyB,EAApCC,UAAyBC,EAAW,6BACzD,OACE,cAAC,IAAD,2BACMA,GADN,IAEEC,OAAQ,SAACC,GAAD,OACN,cAAC7F,EAAD,UACE,cAACyF,EAAD,eAAeI,WAOzB,OACE,mCACE,eAAC,IAAD,WAEE,cAACL,EAAD,CAAaE,UAAW5E,EAAUf,KAAMD,EAAiBC,KAAM+F,OAAK,IACpE,cAACN,EAAD,CAAaE,UAAWxE,EAAOnB,KAAMD,EAAiBC,KAAM+F,OAAK,IACjE,cAACN,EAAD,CAAaE,UAAWnB,GAAQxE,KAAMD,EAAcC,KAAM+F,OAAK,IAC/D,cAACN,EAAD,CACEE,UAAW7E,EACXd,KAAMD,EAAkBC,KACxB+F,OAAK,IAEP,cAACN,EAAD,CACEE,UAAWhC,EACX3D,KAAMD,EAAqBC,KAC3B+F,OAAK,IAEP,cAACN,EAAD,CACEE,UAAW7B,GACX9D,KAAMD,EAA4BC,KAClC+F,OAAK,U,2BCvCTC,GAAe,CACnBC,OAAQrI,aAAaC,QAAQ,UAC7BqI,QAAStI,aAAaC,QAAQ,WAC9BY,gBAAiB,KACjB0H,KAAM,MCjBOC,8BAAgB,CAC7B1H,KDmBkB,WAAmC,IAAlCF,EAAiC,uDAAzBwH,GAAcK,EAAW,uCAC5ClI,EAAkBkI,EAAlBlI,KAAMC,EAAYiI,EAAZjI,QACd,OAAQD,GACN,KAAK1B,EAEH,OADAmB,aAAa0I,QAAQ,SAAUlI,EAAQ6H,QAChC,2BACFzH,GADL,IAEEC,iBAAiB,EACjBwH,OAAQ7H,EAAQ6H,OAChBC,QAAS9H,EAAQ8H,UAErB,KAAKvJ,EACH,OAAO,2BACF6B,GADL,IAEE2H,KAAM/H,IAGV,KAAK7B,EACH,OAAO,2BACFiC,GADL,IAEEC,iBAAiB,IAErB,KAAK5B,EACH,OAAO,2BACF2B,GADL,IAEEC,iBAAiB,IAErB,KAAK3B,EACH,OAAO,2BACF0B,GADL,IAEEC,iBAAiB,IAErB,KAAKjC,EACL,KAAKE,EACL,KAAKK,EAGH,OAFAa,aAAa2I,WAAW,UACxB3I,aAAa2I,WAAW,WACjB,2BACF/H,GADL,IAEEyH,OAAQ,KACRC,QAAS,KACTzH,iBAAiB,EACjB0H,KAAM,OAEV,KAAKvJ,EACH,OAAO,2BACF4B,GADL,IAEE2H,KAAM,OAEV,KAAKnJ,EACL,KAAKC,EACL,KAAKC,EACL,KAAKC,EACH,OAAO,eACFqB,GAEP,QACE,OAAOA,MEzEPgI,GAAa,CAACC,MAEPC,GAAQC,uBACnBC,GALmB,GAOnBC,+BAAoBC,mBAAe,WAAf,EAAmBN,MCInCO,I,MAAOC,SAASC,eAAe,SAE/BC,GACJ,cAAC,IAAD,CAAUR,MAAOA,GAAjB,SACE,cAAC,IAAD,UACE,cAAC,GAAD,QAKNS,IAAStB,OAAOqB,GAAWH,M","file":"static/js/main.48631ea4.chunk.js","sourcesContent":["export const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS'\r\nexport const SIGNUP_FAILED = 'SIGNUP_FAILED'\r\n\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS'\r\nexport const LOGIN_FAILED = 'LOGIN_FAILED'\r\n\r\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS'\r\nexport const LOAD_USER_FAILED = 'LOAD_USER_FAILED'\r\n\r\nexport const AUTHENTICATED_SUCCESS = 'AUTHENTICATED_SUCCESS'\r\nexport const AUTHENTICATED_FAILED = 'AUTHENTICATED_FAILED'\r\n\r\nexport const LOGOUT = 'LOGOUT'\r\n\r\nexport const PASSWORD_RESET_SUCCESS = 'PASSWORD_RESET_SUCCESS'\r\nexport const PASSWORD_RESET_FAILED = 'PASSWORD_RESET_FAILED'\r\n\r\nexport const PASSWORD_RESET_CONFIRM_SUCCESS = 'PASSWORD_RESET_CONFIRM_SUCCESS'\r\nexport const PASSWORD_RESET_CONFIRM_FAILED = 'PASSWORD_RESET_CONFIRM_FAILED'","import axios from \"axios\";\r\n\r\nexport const API = axios.create({\r\n  baseURL: process.env.REACT_APP_API_ENDPOINT_URL,\r\n});\r\n","import {\r\n  SIGNUP_SUCCESS,\r\n  SIGNUP_FAILED,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAILED,\r\n  LOAD_USER_SUCCESS,\r\n  LOAD_USER_FAILED,\r\n  AUTHENTICATED_SUCCESS,\r\n  AUTHENTICATED_FAILED,\r\n  LOGOUT,\r\n  PASSWORD_RESET_SUCCESS,\r\n  PASSWORD_RESET_FAILED,\r\n  PASSWORD_RESET_CONFIRM_SUCCESS,\r\n  PASSWORD_RESET_CONFIRM_FAILED,\r\n} from \"../actions/types\";\r\n\r\nimport { API } from \"../../axiosInstance\";\r\n\r\n// Check Authentictaion of Users, When user again loggedIn after some times.\r\nexport const checkAuthentication = () => async (dispatch) => {\r\n  if (localStorage.getItem(\"access\")) {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    };\r\n\r\n    const body = JSON.stringify({ token: localStorage.getItem(\"access\") });\r\n\r\n    try {\r\n      const result = await API.post(\"/auth/jwt/verify/\", body, config);\r\n\r\n      if (result.data.code !== \"token_not_valid\") {\r\n        dispatch({\r\n          type: AUTHENTICATED_SUCCESS,\r\n        });\r\n        return true;\r\n      } else {\r\n        dispatch({\r\n          type: AUTHENTICATED_FAILED,\r\n        });\r\n        return false;\r\n      }\r\n    } catch (err) {\r\n      dispatch({\r\n        type: AUTHENTICATED_FAILED,\r\n      });\r\n      return false;\r\n    }\r\n  } else {\r\n    dispatch({\r\n      type: AUTHENTICATED_FAILED,\r\n    });\r\n    return false;\r\n  }\r\n};\r\n\r\n// Register a New Account for user\r\nexport const signup =\r\n  (email, name, password, re_password) => async (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n    const body = JSON.stringify({ email, name, password, re_password });\r\n\r\n    try {\r\n      const result = await API.post(\"/auth/users/\", body, config);\r\n      \r\n      const statusCode = result.status;\r\n\r\n      if (statusCode === 201) {\r\n        const { status, statusText } = result;\r\n        const res = { status, statusText };\r\n        dispatch({\r\n          type: SIGNUP_SUCCESS,\r\n        });\r\n        return res;\r\n      } else {\r\n        const { status, statusText, data } = result.response;\r\n        const res = { status, statusText, data };\r\n\r\n        dispatch({\r\n          type: SIGNUP_FAILED,\r\n        });\r\n        return res;\r\n      }\r\n    } catch (err) {\r\n      const { status, statusText, data } = err.response;\r\n\r\n      const res = { status, statusText, data };\r\n      dispatch({\r\n        type: SIGNUP_FAILED,\r\n      });\r\n      return res;\r\n    }\r\n  };\r\n\r\n// Login the existing user account\r\nexport const login = (email, password) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const body = JSON.stringify({ email, password });\r\n\r\n  try {\r\n    const result = await API.post(\"/auth/jwt/create/\", body, config);\r\n    const statusCode = result.status;\r\n\r\n    if (statusCode === 200) {\r\n      const { status, statusText } = result;\r\n      const res = { status, statusText };\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: result.data,\r\n      });\r\n\r\n      dispatch(loadUser());\r\n      return res;\r\n    } else {\r\n      const { status, statusText, data } = result.response;\r\n      const res = { status, statusText, data };\r\n\r\n      dispatch({\r\n        type: LOGIN_FAILED,\r\n      });\r\n      return res;\r\n    }\r\n  } catch (err) {\r\n    const { status, statusText, data } = err.response;\r\n\r\n    const res = { status, statusText, data };\r\n    dispatch({\r\n      type: LOGIN_FAILED,\r\n    });\r\n    return res;\r\n  }\r\n};\r\n\r\n// Get User data after loggedIn\r\nexport const loadUser = () => async (dispatch) => {\r\n  if (localStorage.getItem(\"access\")) {\r\n    try {\r\n      const result = await API.get(\"/auth/users/me/\", {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `JWT ${localStorage.getItem(\"access\")}`,\r\n          Accept: \"application/json\",\r\n        },\r\n      });\r\n\r\n      dispatch({\r\n        type: LOAD_USER_SUCCESS,\r\n        payload: result.data,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: LOAD_USER_FAILED,\r\n      });\r\n    }\r\n  } else {\r\n    dispatch({\r\n      type: LOAD_USER_FAILED,\r\n    });\r\n  }\r\n};\r\n\r\n// Logout of user account\r\nexport const logout = () => (dispatch) => {\r\n  dispatch({\r\n    type: LOGOUT,\r\n  });\r\n};\r\n\r\n// Get reset password link of the user account\r\nexport const reset_password = (email) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  const body = JSON.stringify({ email });\r\n\r\n  try {\r\n    const result = await API.post(\"/auth/users/reset_password/\", body, config);\r\n\r\n    dispatch({\r\n      type: PASSWORD_RESET_SUCCESS,\r\n    });\r\n    return true;\r\n  } catch (err) {\r\n    dispatch({\r\n      type: PASSWORD_RESET_FAILED,\r\n    });\r\n    return false;\r\n  }\r\n};\r\n\r\n// Reset the new password of user account\r\nexport const reset_password_confirm =\r\n  (uid, token, new_password, re_new_password) => async (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n    const body = JSON.stringify({ uid, token, new_password, re_new_password });\r\n    try {\r\n      const result = await API.post(\r\n        \"/auth/users/reset_password_confirm/\",\r\n        body,\r\n        config\r\n      );\r\n\r\n      dispatch({\r\n        type: PASSWORD_RESET_CONFIRM_SUCCESS,\r\n      });\r\n      return true;\r\n    } catch (err) {\r\n      dispatch({\r\n        type: PASSWORD_RESET_CONFIRM_FAILED,\r\n      });\r\n      console.log(err.response);\r\n      return false;\r\n    }\r\n  };\r\n","import React, { useState } from \"react\";\r\n\r\nimport { Nav, Navbar, Container } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n\r\nimport { logout } from \"../../store/actions/auth\";\r\n\r\nexport const HeaderApp = ({ logout, isAuthenticated }) => {\r\n  const [redirect, setRedirect] = useState(false);\r\n\r\n  const logout_user = () => {\r\n    logout();\r\n  };\r\n\r\n  const AuthLinks = () => {\r\n    return (\r\n      <>\r\n        <Nav.Link onClick={logout_user}>Logout</Nav.Link>\r\n      </>\r\n    );\r\n  };\r\n  const GuestLinks = () => {\r\n    return (\r\n      <>\r\n        <Nav.Link as={Link} to=\"/login\">\r\n          Login\r\n        </Nav.Link>\r\n        <Nav.Link as={Link} to=\"/signup\">\r\n          Signup\r\n        </Nav.Link>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg=\"light\" expand=\"lg\">\r\n        <Container>\r\n          <Navbar.Brand as={Link} to=\"/\">\r\n            Login System\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"ms-auto\">\r\n              <Nav.Link as={Link} to=\"/\">\r\n                Home\r\n              </Nav.Link>\r\n              <Nav.Link as={Link} to=\"/\">\r\n                FAQ\r\n              </Nav.Link>\r\n              {isAuthenticated ? <AuthLinks /> : <GuestLinks />}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n});\r\n\r\nexport const Header = connect(mapStateToProps, { logout })(HeaderApp);\r\n","export const Routes = {\r\n  // Home: { path: \"/\" },\r\n  Dashboard: { path: \"/\" },\r\n  Loginpage: { path: \"/login\" },\r\n  signup: { path: \"/signup\" },\r\n  resetpassword: { path: \"/reset-password\" },\r\n  resetpasswordconfrim: { path: \"/password/reset/:uid/:token\" },\r\n  activation: { path: \"/activate/:uid/:token\" },\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { Header } from \"../components/Navbar/Navbar\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { checkAuthentication, loadUser } from \"../store/actions/auth\";\r\n\r\nimport { ToastContainer, Slide } from \"react-toastify\";\r\n// import 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst LayoutApp = ({ checkAuthentication, loadUser, children }) => {\r\n  useEffect(() => {\r\n    checkAuthentication();\r\n    loadUser();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <ToastContainer transition={Slide} />\r\n      {children}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Layout = connect(null, { checkAuthentication, loadUser })(\r\n  LayoutApp\r\n);\r\n","import React from 'react'\r\n\r\nexport const Activation = () => {\r\n    return (\r\n        <div>\r\n            Activation\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\n\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nconst HomepageApp = ({ isAuthenticated }) => {\r\n\r\n  return (\r\n    <>\r\n      {isAuthenticated ? (\r\n        <Container>\r\n          <Row>\r\n            <Col xl={12}>\r\n              <div className=\"mt-5 p-5 bg-light\">\r\n                <div className=\"text-center\">\r\n                  <h1>Session Authentication App</h1>\r\n                  <p className=\"text-muted\">\r\n                    The Application uses a Django rest framework session\r\n                    authentication to login and logout users. Here I use React\r\n                    as Frontend.\r\n                  </p>\r\n                </div>\r\n                <hr className=\"my-4\" />\r\n                <Link className=\"btn btn-secondary me-3\" to=\"/login\">\r\n                  Login\r\n                </Link>\r\n                <Link className=\"btn btn-outline-secondary\" to=\"/signup\">\r\n                  Sign up\r\n                </Link>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      ) : (\r\n        <Redirect to=\"/login\" />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapToStateProps = (state) => ({\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n});\r\nexport const Homepage = connect(mapToStateProps)(HomepageApp);\r\n","import React, { useState } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// Bootstrap\r\nimport { Container, Row, Col, Card, Form, Button } from \"react-bootstrap\";\r\n\r\nimport { toast } from \"react-toastify\";\r\n\r\n// Redux action\r\nimport { login } from \"../../store/actions/auth\";\r\n\r\nconst LoginApp = ({ login, isAuthenticated }) => {\r\n  const [formData, setformData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const { email, password } = formData;\r\n\r\n  const handleChange = (e) =>\r\n    setformData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // send state to redux\r\n    const log = await login(email, password);\r\n\r\n    if (log.status === 200) {\r\n\r\n      const message = `Login Success`;\r\n\r\n      toast.success(message, {\r\n        hideProgressBar: true,\r\n        autoClose: 4000,\r\n      });\r\n    } else {\r\n\r\n      const message = `${log.status} ${log.statusText}, ${log.data.detail}`;\r\n\r\n      toast.error(message, {\r\n        hideProgressBar: true,\r\n        autoClose: 4000,\r\n      });\r\n    }\r\n  };\r\n\r\n  // user IsAuthenticated\r\n  // Redirect to homepage\r\n\r\n  if (isAuthenticated) {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex align-items-center min-vh-100 py-3\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col lg={5}>\r\n              <Card>\r\n                <Card.Body className=\"p-4\">\r\n                  <div className=\"text-center w-75 m-auto\">\r\n                    <h3 className=\"text-dark mb-3\">Login</h3>\r\n                    <p className=\"text-muted mb-4\">\r\n                      Enter your credentials to access admin panel\r\n                    </p>\r\n                  </div>\r\n                  <Form onSubmit={(e) => handleSubmit(e)}>\r\n                    <Form.Group className=\"mb-3\">\r\n                      <Form.Label htmlFor=\"#email\">Email Address</Form.Label>\r\n                      <Form.Control\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        id=\"email\"\r\n                        placeholder=\"Email Address\"\r\n                        value={email || \"\"}\r\n                        onChange={(e) => handleChange(e)}\r\n                        required\r\n                      />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-3\">\r\n                      <Link\r\n                        to=\"/reset-password\"\r\n                        className=\"text-muted float-end \"\r\n                      >\r\n                        <small>Forgot your password?</small>\r\n                      </Link>\r\n                      <Form.Label htmlFor=\"#password\">Password</Form.Label>\r\n                      <Form.Control\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        id=\"password\"\r\n                        placeholder=\"Enter Password\"\r\n                        value={password || \"\"}\r\n                        onChange={(e) => handleChange(e)}\r\n                        minLength=\"8\"\r\n                        required\r\n                      />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mt-3 mb-3 text-center\">\r\n                      <Button type=\"submit\" variant=\"primary\" value=\"Login\">\r\n                        Login\r\n                      </Button>\r\n                    </Form.Group>\r\n                  </Form>\r\n                  <div className=\"text-center mt-5\">\r\n                    <p className=\"text-muted\">\r\n                      Not registered?{\" \"}\r\n                      <Link to=\"/signup\">Create an account</Link>\r\n                    </p>\r\n                  </div>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  // Check Authentictaion\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n});\r\n\r\nexport const Login = connect(mapStateToProps, { login })(LoginApp);\r\n","import React, { useState } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// Bootstrap\r\nimport { Container, Row, Col, Card, Form, Button } from \"react-bootstrap\";\r\n\r\nimport { toast } from \"react-toastify\";\r\n\r\n// Redux action\r\nimport { reset_password } from \"../../store/actions/auth\";\r\n\r\nconst ResetPasswordApp = ({ reset_password }) => {\r\n  const [formData, setformData] = useState({\r\n    email: \"\",\r\n  });\r\n\r\n  const { email } = formData;\r\n\r\n  const handleChange = (e) =>\r\n    setformData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const res = await reset_password(email);\r\n    if (res) {\r\n      toast.dark(\"Check your email inbox for reset link\", {\r\n        autoClose: 4000,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex align-items-center min-vh-100 py-3\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col lg={5}>\r\n              <Card>\r\n                <Card.Body className=\"p-4\">\r\n                  <div className=\"text-center w-75 m-auto\">\r\n                    <h3 className=\"text-dark mb-3\">Password reset link</h3>\r\n                  </div>\r\n                  <Form onSubmit={(e) => handleSubmit(e)}>\r\n                    <Form.Group className=\"mb-3\">\r\n                      <Form.Label htmlFor=\"#email\">Email Address</Form.Label>\r\n                      <Form.Control\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        id=\"email\"\r\n                        placeholder=\"Email Address\"\r\n                        value={email || \"\"}\r\n                        onChange={(e) => handleChange(e)}\r\n                        required\r\n                      />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mt-3 mb-3 text-center\">\r\n                      <Button type=\"submit\" variant=\"primary\">\r\n                        Send Link\r\n                      </Button>\r\n                    </Form.Group>\r\n                  </Form>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Resetpassword = connect(null, { reset_password })(\r\n  ResetPasswordApp\r\n);\r\n","import React, { useState } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// Bootstrap\r\nimport { Container, Row, Col, Card, Form, Button } from \"react-bootstrap\";\r\n\r\nimport { toast } from \"react-toastify\";\r\n\r\n// Redux action\r\nimport { reset_password_confirm } from \"../../store/actions/auth\";\r\n\r\nconst ResetPasswordConfrimApp = ({ match, reset_password_confirm }) => {\r\n  const [formData, setformData] = useState({\r\n    new_password: \"\",\r\n    re_new_password: \"\",\r\n  });\r\n  const [requestSent, setRequestSent] = useState(false);\r\n  const { new_password, re_new_password } = formData;\r\n\r\n  const handleChange = (e) =>\r\n    setformData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const uid = match.params.uid;\r\n    const token = match.params.token;\r\n\r\n    if (new_password === re_new_password) {\r\n      const res = await reset_password_confirm(\r\n        uid,\r\n        token,\r\n        new_password,\r\n        re_new_password\r\n      );\r\n\r\n      if (res) {\r\n        toast.dark(\"Password has been reset successfully\", {\r\n          autoClose: 4000,\r\n        });\r\n        setRequestSent(true);\r\n      } else {\r\n        toast.dark(\"Password reset link can used only one time.\", {\r\n          autoClose: 4000,\r\n        });\r\n      }\r\n    } else {\r\n      toast.error(\"Password don't match\", { autoClose: 4000 });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex align-items-center min-vh-100 py-3\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col lg={5}>\r\n              <Card>\r\n                <Card.Body className=\"p-4\">\r\n                  <div className=\"text-center w-75 m-auto\">\r\n                    <h3 className=\"text-dark mb-3\">Reset your password</h3>\r\n                  </div>\r\n                  <Form onSubmit={(e) => handleSubmit(e)}>\r\n                    <Form.Group className=\"mb-3\">\r\n                      <Form.Label htmlFor=\"#password\">New Password</Form.Label>\r\n                      <Form.Control\r\n                        type=\"password\"\r\n                        name=\"new_password\"\r\n                        id=\"new_password\"\r\n                        placeholder=\"Enter new password\"\r\n                        value={new_password || \"\"}\r\n                        onChange={(e) => handleChange(e)}\r\n                        required\r\n                      />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-3\">\r\n                      <Form.Label htmlFor=\"#re_password\">\r\n                        Re-Enter New password\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        type=\"password\"\r\n                        name=\"re_new_password\"\r\n                        id=\"re_new_password\"\r\n                        placeholder=\"Re-Enter new password\"\r\n                        value={re_new_password || \"\"}\r\n                        onChange={(e) => handleChange(e)}\r\n                        required\r\n                      />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mt-3 mb-3 text-center\">\r\n                      <Button type=\"submit\" variant=\"primary\">\r\n                        Reset Password\r\n                      </Button>\r\n                    </Form.Group>\r\n                  </Form>\r\n                  {requestSent ? (\r\n                    <>\r\n                      <div className=\"text-center mt-3\">\r\n                        <p className=\"text-muted\">\r\n                          <Link to=\"/login\">Login</Link>\r\n                        </p>\r\n                      </div>\r\n                    </>\r\n                  ) : null}\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const ResetPasswordConfrim = connect(null, { reset_password_confirm })(\r\n  ResetPasswordConfrimApp\r\n);\r\n","import React, { useState } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// Bootstrap\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Form,\r\n  Button,\r\n  Spinner,\r\n} from \"react-bootstrap\";\r\n\r\nimport { toast } from \"react-toastify\";\r\n\r\n// Redux action\r\nimport { signup } from \"../../store/actions/auth\";\r\n\r\nconst SignupApp = ({ signup, isAuthenticated }) => {\r\n  const [formData, setformData] = useState({\r\n    email: \"\",\r\n    name: \"\",\r\n    password: \"\",\r\n    re_password: \"\",\r\n  });\r\n  const [requestSent, setRequestSent] = useState(false);\r\n\r\n  const [emailError, setEmailError] = useState(\"\");\r\n\r\n  const [passwordError, setPasswordError] = useState(\"\");\r\n\r\n  const { email, name, password, re_password } = formData;\r\n\r\n  const handleChange = (e) =>\r\n    setformData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (password === re_password) {\r\n      setRequestSent(true);\r\n      // send state to redux\r\n      const log = await signup(email, name, password, re_password);\r\n\r\n      if (log.status === 201) {\r\n        const message =\r\n          \"Activation link sent to email. You can login to your after activation\";\r\n\r\n        setEmailError(\"\");\r\n        setPasswordError(\"\");\r\n        setRequestSent(false);\r\n        toast.success(message, {\r\n          hideProgressBar: true,\r\n          autoClose: 5000,\r\n        });\r\n      } else {\r\n        setRequestSent(false);\r\n        const response_data = log.data;\r\n\r\n        for (let data in response_data) {\r\n          setEmailError(data === \"email\" ? response_data[data][0] : null);\r\n          setPasswordError(data === \"password\" ? response_data[data] : null);\r\n        }\r\n      }\r\n    } else {\r\n      toast.error(\"Password doesn't match, Try another password\");\r\n    }\r\n  };\r\n\r\n  // user IsAuthenticated\r\n  // Redirect to homepage\r\n\r\n  if (isAuthenticated) {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex align-items-center min-vh-100 py-3\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col lg={5}>\r\n              <Card>\r\n                <Card.Body className=\"p-4\">\r\n                  <div className=\"text-center w-75 m-auto\">\r\n                    <h3 className=\"text-dark mb-3\">Login</h3>\r\n                    <p className=\"text-muted mb-4\">\r\n                      Enter your credentials to access admin panel\r\n                    </p>\r\n                  </div>\r\n                  <Form onSubmit={(e) => handleSubmit(e)}>\r\n                    <Form.Group className=\"mb-3\">\r\n                      <Form.Label htmlFor=\"#email\">Email Address</Form.Label>\r\n                      <Form.Control\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        id=\"email\"\r\n                        placeholder=\"Email Address\"\r\n                        value={email || \"\"}\r\n                        onChange={(e) => handleChange(e)}\r\n                        required\r\n                        isInvalid={!!emailError}\r\n                      />\r\n                      <Form.Control.Feedback type=\"invalid\">\r\n                        {emailError ? emailError : \"\"}\r\n                      </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-3\">\r\n                      <Form.Label htmlFor=\"#name\">Username</Form.Label>\r\n                      <Form.Control\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        id=\"name\"\r\n                        placeholder=\"Username\"\r\n                        value={name || \"\"}\r\n                        onChange={(e) => handleChange(e)}\r\n                        required\r\n                      />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-3\">\r\n                      <Form.Label htmlFor=\"#password\">Password</Form.Label>\r\n                      <Form.Control\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        id=\"password\"\r\n                        placeholder=\"Enter Password\"\r\n                        value={password || \"\"}\r\n                        onChange={(e) => handleChange(e)}\r\n                        minLength=\"8\"\r\n                        isInvalid={!!passwordError}\r\n                        required\r\n                      />\r\n                      <Form.Control.Feedback type=\"invalid\">\r\n                        {passwordError ? passwordError : \"\"}\r\n                      </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-3\">\r\n                      <Form.Label htmlFor=\"#re_password\">\r\n                        Re-enter Password\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        type=\"password\"\r\n                        name=\"re_password\"\r\n                        id=\"re_password\"\r\n                        placeholder=\"Re-Enter Password\"\r\n                        value={re_password || \"\"}\r\n                        onChange={(e) => handleChange(e)}\r\n                        minLength=\"8\"\r\n                        required\r\n                      />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mt-3 mb-3 text-center\">\r\n                      {!requestSent ? (\r\n                        <Button type=\"submit\" variant=\"primary\" value=\"Login\">\r\n                          Register\r\n                        </Button>\r\n                      ) : (\r\n                        <Button variant=\"primary\" disabled>\r\n                          <Spinner\r\n                            as=\"span\"\r\n                            animation=\"border\"\r\n                            size=\"sm\"\r\n                            role=\"status\"\r\n                            aria-hidden=\"true\"\r\n                          />\r\n                          {\"  \"}\r\n                          Send Request...\r\n                        </Button>\r\n                      )}\r\n                    </Form.Group>\r\n                  </Form>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  // Check Authentictaion\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n});\r\n\r\nexport const Signup = connect(mapStateToProps, { signup })(SignupApp);\r\n","import React from \"react\";\n\nimport { Switch, Route } from \"react-router-dom\";\n\n// Components\nimport { Navbar } from \"./components/Navbar/Navbar\";\n\n// URL Routes for pages\nimport { Routes } from \"./utils/Routes\";\n\n// layout\nimport { Layout } from \"./hocs/Layout\";\n\n// Pages\nimport { Activation } from \"./pages/Activation/Activation\";\nimport { Homepage } from \"./pages/Homepage/Homepage\";\nimport { Login } from \"./pages/Loginpage/Loginpage\";\nimport { Resetpassword } from \"./pages/Resetpassword/Resetpassword\";\nimport { ResetPasswordConfrim } from \"./pages/Resetpasswordconfrim/ResetPasswordConfrim\";\nimport { Signup } from \"./pages/Signup/Signup\";\n\nexport const App = () => {\n  const LayoutRoute = ({ component: Component, ...rest }) => {\n    return (\n      <Route\n        {...rest}\n        render={(props) => (\n          <Layout>\n            <Component {...props} />\n          </Layout>\n        )}\n      />\n    );\n  };\n\n  return (\n    <>\n      <Switch>\n        {/* <LayoutRoute component={Navbar} path={Routes.Home.path} exact /> */}\n        <LayoutRoute component={Homepage} path={Routes.Dashboard.path} exact />\n        <LayoutRoute component={Login} path={Routes.Loginpage.path} exact />\n        <LayoutRoute component={Signup} path={Routes.signup.path} exact />\n        <LayoutRoute\n          component={Activation}\n          path={Routes.activation.path}\n          exact\n        />\n        <LayoutRoute\n          component={Resetpassword}\n          path={Routes.resetpassword.path}\n          exact\n        />\n        <LayoutRoute\n          component={ResetPasswordConfrim}\n          path={Routes.resetpasswordconfrim.path}\n          exact\n        />\n      </Switch>\n    </>\n  );\n};\n","import {\r\n  SIGNUP_SUCCESS,\r\n  SIGNUP_FAILED,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAILED,\r\n  LOAD_USER_SUCCESS,\r\n  LOAD_USER_FAILED,\r\n  AUTHENTICATED_SUCCESS,\r\n  AUTHENTICATED_FAILED,\r\n  LOGOUT,\r\n  PASSWORD_RESET_SUCCESS,\r\n  PASSWORD_RESET_FAILED,\r\n  PASSWORD_RESET_CONFIRM_SUCCESS,\r\n  PASSWORD_RESET_CONFIRM_FAILED,\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  access: localStorage.getItem(\"access\"),\r\n  refresh: localStorage.getItem(\"refresh\"),\r\n  isAuthenticated: null,\r\n  user: null,\r\n};\r\n\r\nexport const auth = (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case LOGIN_SUCCESS:\r\n      localStorage.setItem(\"access\", payload.access);\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        access: payload.access,\r\n        refresh: payload.refresh,\r\n      };\r\n    case LOAD_USER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        user: payload,\r\n      };\r\n\r\n    case SIGNUP_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isAuthenticated: false,\r\n      };\r\n    case AUTHENTICATED_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n      };\r\n    case AUTHENTICATED_FAILED:\r\n      return {\r\n        ...state,\r\n        isAuthenticated: false,\r\n      };\r\n    case SIGNUP_FAILED:\r\n    case LOGIN_FAILED:\r\n    case LOGOUT:\r\n      localStorage.removeItem(\"access\");\r\n      localStorage.removeItem(\"refresh\");\r\n      return {\r\n        ...state,\r\n        access: null,\r\n        refresh: null,\r\n        isAuthenticated: false,\r\n        user: null,\r\n      };\r\n    case LOAD_USER_FAILED:\r\n      return {\r\n        ...state,\r\n        user: null,\r\n      };\r\n    case PASSWORD_RESET_SUCCESS:\r\n    case PASSWORD_RESET_FAILED:\r\n    case PASSWORD_RESET_CONFIRM_SUCCESS:\r\n    case PASSWORD_RESET_CONFIRM_FAILED:\r\n      return {\r\n        ...state,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { auth } from \"./auth\";\r\n\r\nexport default combineReducers({\r\n  auth,\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducers from \"./reducers/\";\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nexport const store = createStore(\r\n  rootReducers,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// App\nimport { App } from \"./App\";\n\n// React Router\nimport { BrowserRouter } from \"react-router-dom\";\n\n// Redux Store\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/store\";\n\n// Main CSS\nimport \"./styles/app.css\";\n\nconst Root = document.getElementById(\"root\");\n\nconst AppSource = (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(AppSource, Root);\n"],"sourceRoot":""}